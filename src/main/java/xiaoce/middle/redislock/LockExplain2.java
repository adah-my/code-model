package xiaoce.middle.redislock;

public class LockExplain2
{
    /**
     *
     * 浅谈Redis分布式锁
     *
     * 一、Redis的锁长啥样？
     * 上一篇粗劣介绍的JVM锁，比如synchronized关键字和ReentrantLock，它们都是实实在在已经实现的锁，而且还有标志位啥的。但Redis就是一内存...怎么作为锁呢?
     * 有一点要明确，Redis之所以能用来做分布式锁，肯定不是因为它是一片内存，否则JVM本身也占有内存，为什么无法自己实现分布式锁呢?
     * 我个人的理解是，想要自定义一个分布式锁，必须至少满足几个条件：
     *      独立于多节点胸痛之外的一片内存
     *      唯一性（可以通过单线程，也可以通过选举机制，能保证唯一即可）
     *      当然，如果性能高一点就更好了
     *
     * 而Redis提供了setnx指令，如果某个key当前不存在则设置成功并返回true，否则不再重复设置，直接返回false。这不就是编程界的取号机吗？
     * 当然实际用到的命令可不止这一个，具体如何实现，大家等下看代码即可。
     *
     * 二、Demo构思
     * 在我看来，同样需要使用锁，动机可能完全相反：
     *      在保证线程安全的前提下，尽量让所有线程都执行成功
     *      在保证线程安全的前提下，只让一个线程执行成功
     *
     * 前者适用于秒杀等场景。做为商家，当然希望在不发生线程安全问题的情况下，让每一个订单都生效，只要商品售罄。
     * 此时分布式锁的写法可以是”不断重试“或”阻塞等待“，即：递归或while true循环尝试、阻塞等地。
     * 而后者适用于分布式系统或多节点项目的定时任务，比如同一份代码部署在A、B两台服务器上，而数据库共用同一个。不过不做限制，那么在同一时刻，两台服务器都会去拉取列表执行，会发生任务重复执行的情况。
     *
     * 三、分布式锁为什么难设计？
     * 首先，要和大家说一下，但凡牵涉到分布式的处理，没有一个是简单的
     * 这里有两个问题：
     *      为什么要设置锁的过期时间？
     *      锁的过期时间设置多久合适？
     * 在极端的情况下（项目在任务进行时重启或以外宕机），可能当前任务来不及解锁就挂了（死锁），那么下一个任务就会一直被锁在方法外等待。
     * 此时需要装一个自动解锁的门，到时间自动开门，也就是要给锁设置一个过期时间。但紧接着又会有第二个问题：锁的失效时间设多长合适？
     * （很难定）因为随着项目的发展，定时任务的执行的时间很可能是变化的。
     *
     * 锁过期时间设置过长：一旦发生宕机来不及解锁，那么过期时间越长，影响面积越广。
     * 锁过期时间设置过短：上个线程还没执行完，锁过期了，下一个线程就过来重复执行了。
     *                                                                                                            
     * 三、自定义Redis分布式锁的弊端
     * setnx key value + expire key exprietime 这两个操作不是原子性的中间宕机会导致死锁
     * 解锁不是原子的，可能会出现删别人锁
     *
     * 也就是说，绕来绕去，想要设计一个较完备的Redis分布式锁，必须至少解决3个问题：
     *      加锁原子性（setnx和expire要保证原子性，否则会容易发生死锁）
     *      加锁原子性（不能误删别人的锁）
     *      需要考虑业务/定时任务执行的时间，并为锁续期
     *
     * 如果不考虑性能啥的，加锁解锁原子性都可以通过lua脚本实现（利用Redis单线程的特性）
     * 一次执行一个脚本，要么成功，要么失败，不会和其他指令交错执行，最难的是如何根据实际业务的执行时间给锁续期！
     *
     *
     *
     *
     *
     *
     *
     *
     */



























































































































































































}
